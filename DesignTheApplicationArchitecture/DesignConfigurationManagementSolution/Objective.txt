    1. Manage configuration sources, including XML, JSON and INI files
	
		https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-2.2#file-configuration-provider

		Notes:
			https://weblog.west-wind.com/posts/2017/Dec/12/Easy-Configuration-Binding-in-ASPNET-Core-revisited

		Remarks:
			The example for prototype configuration does not include the bind option. If I have time I will come back and investigate this feature further.


	2. Manage environment variables
	
		https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-2.2#environment-variables-configuration-provider

		Remark:
			This is very similar to objective 1 and does not require another prototype.		

	3. Implement Option Objects (not required, implmenet if time allows)

		https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options?view=aspnetcore-2.2

	4. Implement multiple environments using files and hierarchical structures (not required, implmenet if time allows)

		https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-2.2#hierarchical-configuration-data

		Remark:
			This objective is simple in concept and I am not concerned about understanding the cert questions related to it.

	5. Manage sensitive configuration (complex and indepth, implmenet later)

		https://docs.microsoft.com/en-us/aspnet/core/security/app-secrets?view=aspnetcore-2.2&tabs=windows
		https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/configuration/?view=aspnetcore-2.2

		The ASP.NET Core data protection stack is designed to serve as the long-term replacement for the <machineKey> element in ASP.NET 1.x - 4.x.

		Remark:
			Will return to this objective. It is very indepth and should be returned to after other sections and objectives have been completed.

	6. React to runtime configuration changes (Prototype not required, This is a simple switch on the configuration setup call)

	7. Implement a custom configuration source (not required, implmenet if time allows)

https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-2.2#custom-configuration-provider



	8. Secure configuration by using Azure Key Vault

https://docs.microsoft.com/en-us/aspnet/core/security/key-vault-configuration?view=aspnetcore-2.2



	9. Use the Secret Manager tool in development to keep secrets out of your code for configuration values
